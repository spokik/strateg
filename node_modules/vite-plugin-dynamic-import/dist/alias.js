"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AliasContext = void 0;
const path_1 = __importDefault(require("path"));
class AliasContext {
    constructor(config) {
        this.config = config;
    }
    replaceImportee(importee, id) {
        return this.replace(importee, id, false);
    }
    replaceRawImportee(rawImportee, id) {
        return this.replace(rawImportee, id, true);
    }
    replace(importee, id, raw) {
        const alias = this.config.resolve.alias;
        const sColon = raw ? importee.slice(0, 1) : '';
        let url = raw ? importee.slice(1, -1) : importee;
        const eColon = raw ? importee.slice(-1) : '';
        for (const aliasItem of alias) {
            const { find, replacement, customResolver } = aliasItem;
            // TODO: Alias['customResolver']
            let _find;
            if (find instanceof RegExp && find.test(url)) {
                _find = find;
            }
            else if (typeof find === 'string' && url.startsWith(find)) {
                _find = find;
            }
            if (_find) {
                if (path_1.default.isAbsolute(replacement)) {
                    const relative = path_1.default.relative(/* ðŸš§ */ path_1.default.dirname(id), replacement);
                    const relativeUrl = relative === ''
                        ? `./${url.replace(_find, '').replace(/^\//, '')}`
                        : path_1.default.join(relative, url.replace(_find, ''));
                    // https://github.com/vitejs/vite/blob/1e9615d8614458947a81e0d4753fe61f3a277cb3/packages/vite/src/node/plugins/importAnalysis.ts#L672
                    url = sColon + relativeUrl + eColon;
                }
                else {
                    url = sColon + url.replace(_find, replacement) + eColon;
                }
                return {
                    alias: aliasItem,
                    importeeIsRaw: raw,
                    importee,
                    replacedImportee: url,
                };
            }
        }
    }
}
exports.AliasContext = AliasContext;
