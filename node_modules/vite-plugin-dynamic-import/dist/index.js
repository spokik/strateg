"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const acorn_walk_1 = require("acorn-walk");
const fast_glob_1 = __importDefault(require("fast-glob"));
const utils_1 = require("./utils");
const alias_1 = require("./alias");
const dynamic_import_vars_1 = require("./dynamic-import-vars");
const dynamic_import_helper_1 = require("./dynamic-import-helper");
const PLUGIN_NAME = 'vite-plugin-dynamic-import';
function dynamicImport(options = {}) {
    let config;
    let aliasCtx;
    let dynamicImport;
    return {
        name: PLUGIN_NAME,
        config(_config) {
            // sortPlugin(PLUGIN_NAME, _config)
        },
        configResolved(_config) {
            config = _config;
            aliasCtx = new alias_1.AliasContext(_config);
            dynamicImport = new dynamic_import_vars_1.DynamicImportVars(aliasCtx);
        },
        async transform(code, id, opts) {
            var _a, _b;
            const pureId = (0, utils_1.cleanUrl)(id);
            const globExtensions = ((_a = config.resolve) === null || _a === void 0 ? void 0 : _a.extensions) || utils_1.JS_EXTENSIONS.concat(utils_1.KNOWN_SFC_EXTENSIONS);
            const { ext } = path_1.default.parse((0, utils_1.cleanUrl)(id));
            if (/node_modules/.test(pureId))
                return;
            if (!utils_1.JS_EXTENSIONS.includes(ext))
                return;
            if (!(0, utils_1.hasDynamicImport)(code))
                return;
            if (await ((_b = options.filter) === null || _b === void 0 ? void 0 : _b.call(options, code, id, opts)) === false)
                return;
            const ast = this.parse(code);
            let dynamicImportIndex = 0;
            const dynamicImportRecord = [];
            (0, acorn_walk_1.simple)(ast, {
                ImportExpression(node) {
                    const importRawArgument = code.slice(node.source.start, node.source.end);
                    const { files, startsWithAliasFiles } = globFiles(dynamicImport, node, code, pureId, globExtensions);
                    if (!files || !files.length) {
                        return null;
                    }
                    const allImportee = listAllImportee(globExtensions, files, startsWithAliasFiles);
                    const importRuntime = (0, dynamic_import_helper_1.generateDynamicImportRuntime)(allImportee, dynamicImportIndex);
                    dynamicImportRecord.push({
                        node: {
                            type: node.type,
                            start: node.start,
                            end: node.end,
                        },
                        importRawArgument,
                        importRuntime,
                    });
                },
            });
            if (dynamicImportRecord.length) {
                for (let len = dynamicImportRecord.length, i = len - 1; i >= 0; i--) {
                    const { node, importRawArgument, importRuntime } = dynamicImportRecord[i];
                    const dyImptFnName = `${importRuntime.name}(${importRawArgument})`;
                    code = code.slice(0, node.start) + dyImptFnName + code.slice(node.end);
                }
                const dyImptFnBody = dynamicImportRecord.map(e => e.importRuntime.body).join('\n');
                // TODO: sourcemap
                return code + `
// --------- ${PLUGIN_NAME} ---------
${dyImptFnBody}
`;
            }
            return null;
        },
    };
}
exports.default = dynamicImport;
function globFiles(dynamicImport, ImportExpressionNode, sourceString, pureId, extensions) {
    const node = ImportExpressionNode;
    const code = sourceString;
    let { glob, alias } = dynamicImport.dynamicImportToGlob(node.source, code.substring(node.start, node.end), pureId);
    if (!glob) {
        // this was not a variable dynamic import
        return null;
    }
    let globWithIndex;
    glob = (0, utils_1.fixGlob)(glob) || glob;
    // fill necessary ext
    // e.g. `../views/*` -> `../views/*{.js,.ts,.vue ...}`
    if (!extensions.includes(path_1.default.extname(glob))) {
        globWithIndex = glob + '/index' + `{${extensions.join(',')}}`;
        glob = glob + `{${extensions.join(',')}}`;
    }
    const files = fast_glob_1.default.sync(globWithIndex ? [glob, globWithIndex] : glob, { cwd: /* ðŸš§ */ path_1.default.dirname(pureId) });
    let startsWithAliasFiles;
    if (alias) {
        const static1 = alias.importee.slice(0, alias.importee.indexOf('*'));
        const static2 = alias.replacedImportee.slice(0, alias.replacedImportee.indexOf('*'));
        startsWithAliasFiles = files.map(file => file.replace(static2, static1));
    }
    return {
        glob,
        alias,
        files,
        startsWithAliasFiles,
    };
}
function listAllImportee(extensions, importeeList, importeeWithAliasList) {
    return (importeeWithAliasList || importeeList).reduce((memo, importee, idx) => {
        const ext = extensions.find(ext => importee.endsWith(ext));
        const list = [
            importee,
            importee.replace(ext, ''),
        ];
        if (importee.endsWith('index' + ext)) {
            list.push(importee.replace('/index' + ext, ''));
        }
        return Object.assign(memo, { [importeeList[idx]]: list });
    }, {});
}
